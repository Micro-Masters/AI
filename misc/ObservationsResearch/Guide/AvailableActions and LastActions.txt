Available Actions

-  Available Actions, much like the other observations
   is given to us as a tensor. This means that you can 
   access the list of actions similarly to an array.
   The list of actions will be given as a list of integers.
   These integers are the ids of the actions. 

-  In order to actually make the bot choose any of the 
   available actions we must obtain the action ids.
   These are given to us in actions.py

-  You can assign variables to the action ids similarly
   the the tutorial that we followed.
   _NO_OP = actions.FUNCTIONS.no_op.id

-  Every action has an action id that is an integer
   If you were to print out obs.observations.available_actions
   you would get an array with the action ids. 
   For example at the beginning of the game, you'd
   probably print out [0 1 2 4 7] which are the actions
   [no_op, move_camera, select_point, select_control_group,
   select_army] and as the game goes on more actions will 
   become available meaning there will be more ids to chosse
   from. 

-  To check if the desired action is within the available_actions
   tensor. Simply use an if statement in the following fashion:
  	if _NO_OP in obs.observations.available_actions:
   
-  And if you want the bot to do the action, 
	return actions.FunctionCall(_NO_OP, [])

-  The array parameter in the function call takes different object 
   types depending on the action that is being returned. 
   If you are calling a function that uses the minimap (MOVE_CAMERA,
   ATTACK_MINIMAP, etc) you have to put in x and y coordinates into 
   the array in this fashion: [(25, 25)] 
   The coordinates must be within the range of the map.  
   Some function calls also require the array to give a value of _QUEUED
   or _NOT_QUEUED. In the case of ATTACK_MINIMAP you would write:
   [_NOT_QUEUED, (25, 25)] To leave the action unqueued and also pass in the 
   x and y coordinates the units are supposed to attack in. 

-  In our bot the observations are organized a little bit
   differenlty since we are not directly given the 
   observations within the step function. Instead we 
   get the observations as a return value from the environment
   step function. 
   The way to access available actions in our bot is, 
   obs[0].observation.available_actions 


Last Actions:

-  Last actions is the list of all actions that were made
   successfully since the last observation. Actions that
   were attempted aren't included in here. 

-  You can access this tensor similarly to the way you 
   access available actions. 
   obs.observation.last_actions or in the case of our bot
   obs[0].observation.last_actions

-  Use this tensor if you need to make sure that certain 
   actions were successful or if you need to make rules
   based on the previous actions.  

-  If you were to print out this tensor you would get an
   array similar to the available actions. The array
   will be filled with only the integer ids of the 
   actions previously done. 